# -*- coding: utf-8 -*-
"""List,set e dict comprehensions.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1z_949X0ZNRguXPgN3ACskdEeaNlakNCi

Revisão de conteúdo sobre o livro <b>Python para Análise de Dados</b> do autor Wes Mckinney .

By: Rogério Sobral Ribeiro

<b>Fonte: MCKINNEY,Wes. Python para Análise de Dados. São Paulo. O.Reilly- Novatec .2018</b>

Esse é sem dúdida um dos recursos mais queridos do Python. Com ele você pode montar uma lista de modo rápido e prático.

A Expressão é [expr for values in collection if condition]

Vamos por parte:
Primeiro vamos criar da forma padrão. Imagine que deseja criar uma lista com os resultados da tabuada do 2:
"""

decimal=list(range(10))
decimal

resultados=[]
for valor in decimal:
  resultados.append(valor*2)

resultados

"""Podemos realizar de modo mais sofisticado esse mesmo cod:"""

resultado=[valor*2 for valor in list(range(10))]
resultado

"""Imagine agora que deseja colocar todas as primeiras letras dos nomes de usuários em letras maiúsculas, poderíamos fazer assim:"""

nomes=["pedro", "joão", "carlos", "marcos", "maria"]

nomes=[x.capitalize() for x in nomes]
nomes

"""A mesma coisa pode ser realizada por <b>Set dict</b>, logicamente respeitando suas diferenças. No caso de  <b>dict</b> ele possui chave e valor."""

lista=["pedro", "joão", "carlos", "marcos", "maria"]

nomes=[]
nomes={index:x for index,  x in enumerate(lista)}
nomes

"""#List comprehensions Aninhadas

É usada quando temos uma lista de listas.

Neste caso vamos ter duas listas de nomes dentro de uma única lista:
"""

some_data=[["pedro", "joão", "carlos", "marcos", "maria"]
           , ["jose", "lucas", "natalia", "sebastião", "pilar"]]

"""Você pode ter obtido esses dados de diferentes locais e quer organiza-los verificando se no nome possui mais de 2 "a", e salvar esses nomes em uma lista nova."""

names_of_interest=[] # criando uma lista vazia
for  word in some_data: # percorrendo a lista aninhada
  enough=[name for name in word if name.count("a")>=2] # verificando palavra por palavra das listas
  names_of_interest.append(enough)# salavando na lista

names_of_interest

"""A mesma ideia realizada de outra forma, sem o for externo, alocamos ele como se fosse um segundo nível para a direita.




"""

names_of_interest=[name  for names in some_data for name in names  if name.count("a")>=2]
names_of_interest

"""<b>.Obs:</b> Muitos niveis de alinhamento em uma lista, pode prejudicar a legibilidade do código """